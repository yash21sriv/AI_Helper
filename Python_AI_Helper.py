#############################################################################################
#############################  import required modules ######################################
#############################################################################################
import tkinter as tk
from tkinter import ttk
from tkinter import filedialog, messagebox
import google.generativeai as genai
import textwrap
import threading
from IPython.display import Markdown , display
import tkinter.simpledialog as simpledialog
import ctypes
# Increas Dots Per inch so it looks sharper conetnt in tkinter window
ctypes.windll.shcore.SetProcessDpiAwareness(True)

##############################################################################################
##########################  Integrate Gemini-Pro through API  ################################
##############################################################################################
GOOGLE_API_KEY = "Enter you Api Key"
genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel('gemini-pro')
##############################################################################################
##############################################################################################

# clear the response generated by Gemini-Pro
def to_markdown(text):
  text = text.replace('â€¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))


##############################################################################################
##################################  Open Python File   #######################################
##############################################################################################
file_path = ""
file_content = ""
def select_file():
    global file_path
    file_path = filedialog.askopenfilename(filetypes=[("Python Files", "*.py")])
    print("Selected file:", file_path)
    
    # Open the selected file and read its content
    global file_content 
    with open(file_path, 'r') as file:
        file_content = file.read()
        update_bottom_frame("Choose an Option from Above : \n\n ###Your uploaded code is as follow:\n\n"+file_content)

##############################################################################################
#######  Task functions, 1. Code completion,2. debugging and 3. document Retrival  ###########
##############################################################################################

def execute_query(query):
    response=model.generate_content(query)
    text = to_markdown(response.text)
    if isinstance(text, Markdown):
        text = text.data
    update_bottom_frame(text)
    model.generate_content("clear all previous Chats. ")

def CodeCompletion():
    # tabCodeCompletion = add_tab("tabCodeCompletion")
    global model
    if file_path == "" :
        update_bottom_frame("Please select a vaild Python File.... ")
        return 
    query = "Complete the following python code : \n" + file_content
    update_bottom_frame("Running. Please wait for a while...........")
    threading.Thread(target=execute_query, args=(query,)).start()


def DebuggingAssistance():
    if file_path=="" :
        update_bottom_frame("Please select a vaild Python File.... ")
        return 
    query = "Debug this python code, give suggestions to make it error free if there are any error : \n" + file_content
    update_bottom_frame("Running. Please wait for a while...........")
    threading.Thread(target=execute_query, args=(query,)).start()


def DocumentationRetrieval(): 
    #  take input from user ( library/module name )
    user_input = simpledialog.askstring("Input", "Enter the Python library/function name:",parent=window)
    if user_input:
        query = "Give details about this python function/library : " + user_input
        update_bottom_frame("Running. Please wait for a while...........")
        threading.Thread(target=execute_query, args=(query,)).start()

##############################################################################################
################################ Create a Tkinter window  ###################################
##############################################################################################

window = tk.Tk()# Create a new Tkinter window
window.title("Python Helper") # Title of the window
# window.option_add('*Font', 'Courier 15')

screen_height = window.winfo_screenheight() # Get the height of the screen of user
screen_width = window.winfo_screenwidth() # Get the width of the screen of user
desired_height = screen_height # Desired height of the TKinter Window = height of the screen of user
desired_width = int(screen_width *.4)  # Desired width of the TKinter Window = 40% of width of the screen of user

window.geometry(f"{desired_width}x{desired_height}+{int(screen_width*0.6)}+0") # Set the size and position of the window
# Create a frame for the top section
top_frame = tk.Frame(window, width=desired_width, height=50, bg="lightblue")
top_frame.pack(side="top", fill="both", expand=True)

# Create a frame for the bottom section
bottom_frame = tk.Text(window, width=desired_width, height=desired_height-50, bg="lightgreen", wrap=tk.WORD)
bottom_frame.pack(side="bottom", fill="both", expand=True)

# Create a scrollbar
scrollbar = tk.Scrollbar(window)
scrollbar.pack(side="right", fill="y")
scrollbar.config(command=bottom_frame.yview)
bottom_frame.config(yscrollcommand=scrollbar.set)

def update_bottom_frame(text):
    bottom_frame.delete(1.0, tk.END)     # Clear existing text
    bottom_frame.insert(tk.END, text)    # Insert new text

# Create a menu
menu = tk.Menu(window)
window.config(menu=menu)
# Create a "File" menu
file_menu = tk.Menu(menu, tearoff=False)
menu.add_cascade(label="File", menu=file_menu)
file_menu.add_command(label="Open .py File", command=select_file)
file_menu.add_separator()
file_menu.add_command(label="Exit", command=window.quit)


# Create options using Radiobuttons
options_frame = tk.Frame(top_frame)
options_frame.pack()

selected_option = tk.StringVar(value="")# Initially no option selected
# Create three options, 1. Code Completion, 2. Debugging Assistance, 3. Documentation Retrieval
option1 = tk.Radiobutton(options_frame, text="Code Completion", variable=selected_option, value="Option 1", command=lambda: CodeCompletion(),background='lightblue')
option2 = tk.Radiobutton(options_frame, text="Debugging Assistance", variable=selected_option, value="Option 2", command=lambda: DebuggingAssistance(),background='lightblue')
option3 = tk.Radiobutton(options_frame, text="Documentation Retrieval", variable=selected_option, value="Option 3", command=lambda: DocumentationRetrieval(),background='lightblue')
# align all options in 1 line
option1.pack(side=tk.LEFT)
option2.pack(side=tk.LEFT)
option3.pack(side=tk.LEFT)

window.mainloop()